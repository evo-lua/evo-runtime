name: Build and Release (Mac OS)

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
    paths-ignore:
      - '**.md'
  create:
    # Any branch or tag
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    if: github.event.pull_request.draft == false
    name: Build for Mac OS
    runs-on: macos-latest
    env:
        MACOSX_DEPLOYMENT_TARGET: 10.13
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1 # Prevent brew updates in the ccache setup step (~2GB download ...)

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: "0" # Required so that git describe actually works (and we can embed the version tag)

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2

      - name: Install Ninja
        run: brew install ninja

      - name: Configure environment
        run: |
          echo "CC=ccache gcc" >> $GITHUB_ENV
          echo "CXX=ccache g++" >> $GITHUB_ENV
      - name: Build luajit
        run: deps/luajit-unixbuild.sh && ls ninjabuild-unix

      - name: Build luv and libuv
        run: deps/luv-unixbuild.sh && ls ninjabuild-unix

      # Building OpenSSL is extremely slow, so nproc is used to determine the number of parallel jobs
      - name: Install GNU coreutils
        run: brew install coreutils

      - name: Build openssl
        run: deps/openssl-unixbuild.sh && ls ninjabuild-unix

      - name: Build lua-openssl
        run: deps/luaopenssl-unixbuild.sh && ls ninjabuild-unix

      - name: Build zlib
        run: deps/zlib-unixbuild.sh && ls ninjabuild-unix

      - name: Build runtime
        run: ls && ./unixbuild.sh && ls ninjabuild-unix && cp ninjabuild-unix/evo . && ls

      - name: Run smoke tests
        run: ./evo Tests/smoke-test.lua

      - name: Run unit tests
        run: ./evo Tests/unit-test.lua

      - name: Prepare artifacts
        run: cp evo evo-macos-x64

      - name: Publish new release
        # Truly "continuous" releases may be overkill here, so better only release tagged versions
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: evo-macos-x64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
