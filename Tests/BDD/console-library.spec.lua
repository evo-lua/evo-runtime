local console = require("console")
local uv = require("uv")

describe("console", function()
	describe("capture", function()
		it("should start capturing regular console output when called once", function()
			console.capture()
			print("42")
			print("43")
			print("44")
			local capturedConsoleOutput = console.release()
			assertEquals(capturedConsoleOutput, "42\n43\n44\n")
		end)

		it("should clear the internal buffer when called", function()
			console.capture()
			print("42")
			console.capture()
			local capturedConsoleOutput = console.release()
			console.release()
			assertEquals(capturedConsoleOutput, "")
		end)
	end)

	describe("release", function()
		it("should return nil if no capture has been started before", function()
			assertNil(console.release())
		end)

		it("should return an empty string if no output was captured", function()
			console.capture()
			local capturedOutput = console.release()
			assertEquals(capturedOutput, "")
		end)

		it("should return the buffer contents if some output was captured", function()
			console.capture()
			print("Hello! Hello!")
			local capturedOutput = console.release()

			assertEquals(capturedOutput, "Hello! Hello!\n")
		end)

		it("should return only the output for the most recent capture if multiple captures were started", function()
			console.capture()
			print("Whatever")
			console.release()

			console.capture()
			print("Good... bye!")
			local capturedOutput = console.release()

			assertEquals(capturedOutput, "Good... bye!\n")
		end)
	end)

	describe("startTimer", function()
		it("should throw if no timer label has been given", function()
			assertThrows(function()
				console.startTimer()
			end, "Expected argument label to be a string value, but received a nil value instead")
		end)

		it("should throw if a timer with the given label already exists", function()
			console.startTimer("hi")
			assertThrows(function()
				console.startTimer("hi")
			end, "A console timer with label 'hi' already exists")
			console.stopTimer("hi")
		end)
	end)

	describe("stopTimer", function()
		it("should throw if no timer label has been given", function()
			assertThrows(function()
				console.stopTimer()
			end, "Expected argument label to be a string value, but received a nil value instead")
		end)

		it("should throw if no timer with the given label has been started", function()
			assertThrows(function()
				console.stopTimer("does-not-exist")
			end, "No console timer with label 'does-not-exist' currently exists")
		end)

		it("should return the time elapsed since the timer with the given label was started", function()
			console.startTimer("test")
			uv.sleep(100)
			local elapsedTimeInMilliseconds = console.stopTimer("test")
			assert(elapsedTimeInMilliseconds >= 0)
		end)
	end)

	describe("printf", function()
		it("should support C-style format strings to output formatted text", function()
			console.capture()
			console.printf("Hello %s", "world")
			local capturedOutput = console.release()
			assertEquals(capturedOutput, "Hello world\n")
		end)
	end)
end)
