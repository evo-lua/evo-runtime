local curl = require("curl")
local crypto = require("crypto")
local zlib = require("zlib")

describe("curl", function()
	describe("version_info", function()
		it("should return a table containing curl versioning information", function()
			local infoTable = curl.version_info()

			assertTrue(infoTable.feature_names.AsynchDNS)
			assertTrue(infoTable.feature_names.IPv6)
			assertTrue(infoTable.feature_names.Largefile)
			assertTrue(infoTable.feature_names.libz)
			assertTrue(infoTable.feature_names.SSL)
			assertTrue(infoTable.feature_names.threadsafe)

			assertTrue(infoTable.cainfo ~= "")
			assertTrue(infoTable.capath ~= "")

			-- zlib versions don't include a patch version if it's a clean major/minor release
			local zlibVersionMajor, zlibVersionMinor, zlibVersionPatch = zlib.version()
			local semanticZlibVersionString =
				format("%d.%d.%d", zlibVersionMajor, zlibVersionMinor, zlibVersionPatch or 0)
			assertEquals(infoTable.libz_version, semanticZlibVersionString)

			assertTrue(infoTable.protocols.dict)
			assertTrue(infoTable.protocols.file)
			assertTrue(infoTable.protocols.ftp)
			assertTrue(infoTable.protocols.ftps)
			assertTrue(infoTable.protocols.http)
			assertTrue(infoTable.protocols.https)
			assertTrue(infoTable.protocols.imap)
			assertTrue(infoTable.protocols.imaps)
			assertTrue(infoTable.protocols.mqtt)
			assertTrue(infoTable.protocols.pop3)
			assertTrue(infoTable.protocols.pop3s)
			assertTrue(infoTable.protocols.rtsp)
			assertTrue(infoTable.protocols.rtsp)
			assertTrue(infoTable.protocols.smbs)
			assertTrue(infoTable.protocols.smtp)
			assertTrue(infoTable.protocols.smtps)
			assertTrue(infoTable.protocols.telnet)
			assertTrue(infoTable.protocols.tftp)
			assertTrue(infoTable.protocols.ws)
			assertTrue(infoTable.protocols.wss)

			assertEquals(infoTable.ssl_version, "OpenSSL/" .. crypto.version())
		end)
	end)

	describe("version", function()
		it("should return the embedded libcurl version in semver format", function()
			local versionInfo = curl.version_info()
			local versionString, versionNumber, revision = curl.version()
			assertEquals(versionInfo.version, versionString)
			assertEquals(versionInfo.version_num, versionNumber)
			assertEquals(versionInfo.age, revision)
			assertEquals(versionInfo.age, tonumber(curl.bindings.CURLVERSION_NOW))

			assertTrue(type(versionNumber) == "number")
			local firstMatchedCharacterIndex, lastMatchedCharacterIndex = string.find(versionString, "%d+.%d+.%d+")

			assertEquals(firstMatchedCharacterIndex, 1)
			assertEquals(lastMatchedCharacterIndex, string.len(versionString))
			assertEquals(type(string.match(versionString, "%d+.%d+.%d+")), "string")
		end)
	end)
end)
