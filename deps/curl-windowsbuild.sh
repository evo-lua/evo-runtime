set -e
echo "Building target curl"

SRC_DIR=$(pwd)/deps/curl/curl
BUILD_DIR=$SRC_DIR/cmakebuild-windows
OUT_DIR=$(pwd)/ninjabuild-windows

# Enabled features: OpenSSL and zlib are essential and already included, anyway
OPENSSL_DIR=$(pwd)/deps/openssl/openssl
OPENSSL_INCLUDE_DIR=$OPENSSL_DIR/include
STATIC_OPENSSL_FLAGS="-DCURL_USE_OPENSSL=ON -DOPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR -DOPENSSL_USE_STATIC_LIBS=ON -DOPENSSL_ROOT_DIR=$OPENSSL_DIR"

ZLIB_INCLUDE_DIR=$(pwd)/deps/madler/zlib # Only required for wolfSSL - but better safe than sorry?
ZLIB_LIBRARY=$OUT_DIR/zlibstatic.a
STATIC_ZLIB_FLAGS="-DCURL_ZLIB=ON -DZLIB_INCLUDE_DIR=$ZLIB_INCLUDE_DIR -DZLIB_LIBRARY=$ZLIB_LIBRARY"

# Unused features: Pending further review (and a detailed cost/benefit analysis), disable everything else

# Brotli compression: Don't need it right now (compressing with zlib or miniz is already possible)
BROTLI_INCLUDE_DIR=""
BROTLICOMMON_LIBRARY=""
BROTLIDEC_LIBRARY=""
STATIC_BROTLI_FLAGS="-DCURL_BROTLI=OFF -DBROTLI_INCLUDE_DIR=$BROTLI_INCLUDE_DIR -DBROTLICOMMON_LIBRARY=$BROTLICOMMON_LIBRARY -DBROTLIDEC_LIBRARY=$BROTLIDEC_LIBRARY"

# DNS: System APIs should be good enough, and scripts can already use the libuv implementation
CARES_INCLUDE_DIR=""
CARES_LIBRARY=""
STATIC_CARES_FLAGS="-DENABLE_ARES=OFF -DCARES_INCLUDE_DIR=$CARES_INCLUDE_DIR -DCARES_LIBRARY=$CARES_LIBRARY"

# HTTP/2 support: Should probably be enabled, but it requires adding more dependencies
NGHTTP2_INCLUDE_DIR=""
NGHTTP2_LIBRARY=""
STATIC_HTTP2_FLAGS="-DUSE_NGHTTP2=OFF -DNGHTTP2_INCLUDE_DIR=$NGHTTP2_INCLUDE_DIR -DNGHTTP2_LIBRARY=$NGHTTP2_LIBRARY"

# HTTP/3 and QUIC support: Highly desirable, but there's several options that need to be evaluated properly
NGTCP2_INCLUDE_DIR=""
NGTCP2_LIBRARY=""
NGHTTP3_INCLUDE_DIR=""
NGHTTP3_LIBRARY=""
QUICHE_INCLUDE_DIR=""
QUICHE_LIBRARY=""
STATIC_HTTP3_FLAGS="-DUSE_MSH3=OFF -DUSE_NGTCP2=OFF -DUSE_NGHTTP3=OFF -DUSE_QUICHE=OFF -DNGTCP2_INCLUDE_DIR=$NGTCP2_INCLUDE_DIR -DNGTCP2_LIBRARY=$NGTCP2_LIBRARY -DNGHTTP3_INCLUDE_DIR=$NGHTTP3_INCLUDE_DIR -DNGHTTP3_LIBRARY=$NGHTTP3_LIBRARY -DQUICHE_INCLUDE_DIR=$QUICHE_INCLUDE_DIR -DQUICHE_LIBRARY=$QUICHE_LIBRARY"

# LDAP/Kerberos authentication and related features: Seems a bit too niche, review later
STATIC_LDAP_FLAGS="-DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_LDAPS=ON -DUSE_WIN32_LDAP=OFF"

# IDNA doesn't seem general enough to warrant introducing more dependencies right now
LIBIDN2_INCLUDE_DIR=""
LIBIDN2_LIBRARY=""
STATIC_IDNA_FLAGS="-DUSE_LIBIDN2=OFF -DLIBIDN2_INCLUDE_DIR=$LIBIDN2_INCLUDE_DIR -DLIBIDN2_LIBRARY=$LIBIDN2_LIBRARY"

# Mozilla PSL: Potential security enhancement = should add this eventually?
LIBPSL_INCLUDE_DIR=""
LIBPSL_LIBRARY=""
STATIC_PSL_FLAGS="-DCURL_USE_LIBPSL=OFF"

# Real-Time Messaging Protocol: Multimedia streaming - there's probably better solutions now
LIBRTMP_INCLUDE_DIR=""
LIBRTMP_LIBRARY=""
STATIC_RTMP_FLAGS="-DUSE_LIBRTMP=OFF -DLIBRTMP_INCLUDE_DIR=$LIBRTMP_INCLUDE_DIR -DLIBRTMP_LIBRARY=$LIBRTMP_LIBRARY"

# SSH: Very interesting, but does anyone really want to use bindings for this instead of the CLI?
LIBSSH_INCLUDE_DIR=""
LIBSSH_LIBRARY=""
LIBSSH2_INCLUDE_DIR=""
LIBSSH2_LIBRARY=""
STATIC_SSH_FLAGS="-DCURL_USE_LIBSSH=OFF -DCURL_USE_LIBSSH2=OFF -DLIBSSH_INCLUDE_DIR=$LIBSSH_INCLUDE_DIR -DLIBSSH_LIBRARY=$LIBSSH_LIBRARY -DLIBSSH2_INCLUDE_DIR=$LIBSSH2_INCLUDE_DIR -DLIBSSH2_LIBRARY=$LIBSSH2_LIBRARY"

# ZSTD compression: Not needed right now
ZSTD_INCLUDE_DIR=""
ZSTD_LIBRARY=""
STATIC_ZSTD_FLAGS="-DCURL_ZSTD=OFF -DZSTD_INCLUDE_DIR=$ZSTD_INCLUDE_DIR -DZSTD_LIBRARY=$ZSTD_LIBRARY"

LIBCURL_DISABLED_FLAGS="$STATIC_CARES_FLAGS $STATIC_BROTLI_FLAGS $STATIC_LDAP_FLAGS $STATIC_HTTP2_FLAGS $STATIC_HTTP3_FLAGS $STATIC_IDNA_FLAGS $STATIC_PSL_FLAGS $STATIC_RTMP_FLAGS $STATIC_SSH_FLAGS $STATIC_ZSTD_FLAGS -DBUILD_CURL_EXE=OFF -DBUILD_SHARED_LIBS=OFF -DCURL_DISABLE_INSTALL=ON -DBUILD_LIBCURL_DOCS=OFF -DENABLE_CURL_MANUAL=OFF -DBUILD_MISC_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF -DCURL_USE_PKGCONFIG=OFF"
LIBCURL_ENABLED_FLAGS="-DBUILD_STATIC_CURL=ON  $STATIC_OPENSSL_FLAGS $STATIC_ZLIB_FLAGS"
LIBCURL_BUILD_FLAGS="$LIBCURL_ENABLED_FLAGS $LIBCURL_DISABLED_FLAGS"

cmake -S $SRC_DIR -B $BUILD_DIR -G Ninja -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DCMAKE_C_COMPILER=gcc $LIBCURL_BUILD_FLAGS
cmake --build $BUILD_DIR --clean-first

cp $BUILD_DIR/lib/libcurl.a $OUT_DIR
